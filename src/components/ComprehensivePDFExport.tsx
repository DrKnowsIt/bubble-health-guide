import React from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { FileDown, AlertTriangle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import jsPDF from 'jspdf';
import { useConversationMemory } from '@/hooks/useConversationMemory';
import { useComprehensiveHealthReport } from '@/hooks/useComprehensiveHealthReport';

interface User {
  id: string;
  first_name: string;
  last_name: string;
}

interface ComprehensivePDFExportProps {
  selectedUser?: User | null;
}

export const ComprehensivePDFExport: React.FC<ComprehensivePDFExportProps> = ({ selectedUser }) => {
  const { toast } = useToast();
  const { memories, insights } = useConversationMemory(selectedUser?.id);
  const { report } = useComprehensiveHealthReport(selectedUser);

  const formatMemoryForPDF = () => {
    if (!memories.length && !insights.length) {
      return 'No conversation memory or insights available yet.';
    }

    let content = '';
    
    if (insights.length > 0) {
      content += 'AI INSIGHTS:\n\n';
      insights.forEach((insight, index) => {
        content += `${index + 1}. ${insight.key.replace(/_/g, ' ').toUpperCase()}\n`;
        content += `   ${insight.value}\n`;
        content += `   Category: ${insight.category}\n`;
        content += `   Recorded: ${new Date(insight.timestamp).toLocaleDateString()}\n\n`;
      });
    }
    
    if (memories.length > 0) {
      content += '\nCONVERSATION MEMORY:\n\n';
      memories.forEach((memory, index) => {
        content += `Conversation ${index + 1}:\n`;
        if (memory.summary) {
          content += `Summary: ${memory.summary}\n`;
        }
        content += `Date: ${new Date(memory.updated_at).toLocaleDateString()}\n\n`;
      });
    }
    
    return content;
  };

  const addDisclaimerToPage = (doc: jsPDF, pageHeight: number) => {
    const disclaimerY = pageHeight - 25;
    doc.setFontSize(7);
    doc.setFont(undefined, 'italic');
    doc.text('DrKnowsIt AI-Generated Report - Not a substitute for professional medical advice.', 20, disclaimerY);
    doc.text('Please consult with your healthcare provider for medical decisions.', 20, disclaimerY + 4);
  };

  const addHeaderToPage = (doc: jsPDF) => {
    // DrKnowsIt Header
    doc.setFontSize(20);
    doc.setFont(undefined, 'bold');
    doc.text('DrKnowsIt', 20, 20);
    
    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    doc.text('AI-Powered Health Assistant | www.drknowsit.com', 20, 28);
    
    // Header line
    doc.line(20, 32, 190, 32);
  };

  const addProviderNote = (doc: jsPDF, startY: number): number => {
    let currentY = startY;
    
    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    doc.text('Note to Primary Care Provider', 20, currentY);
    currentY += 8;
    
    doc.setFontSize(9);
    doc.setFont(undefined, 'normal');
    const providerNote = `This comprehensive report has been generated by DrKnowsIt AI to assist in tracking patient symptoms and identifying potential health connections. The AI analyzes patient-provided health data, family history, lifestyle factors, and symptoms to highlight patterns that may warrant clinical attention.

Purpose: This tool helps patients better organize their health information and may reveal correlations that could assist in your clinical assessment. All data is patient-reported and should be verified through appropriate clinical evaluation.

Limitations: This AI-generated report is not diagnostic and should not replace clinical judgment. Please use this information as supplementary data to support your professional medical assessment.`;
    
    const splitNote = doc.splitTextToSize(providerNote, 170);
    doc.text(splitNote, 20, currentY);
    currentY += splitNote.length * 4 + 10;
    
    return currentY;
  };

  const exportComprehensivePDF = async () => {
    if (!selectedUser) {
      toast({
        title: "No User Selected",
        description: "Please select a user to export their comprehensive report.",
        variant: "destructive"
      });
      return;
    }

    try {
      const doc = new jsPDF();
      const userName = `${selectedUser.first_name} ${selectedUser.last_name}`;
      const currentDate = new Date().toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: 'numeric',
        minute: '2-digit'
      });
      
      let currentY = 40;
      const pageHeight = doc.internal.pageSize.height;
      
      // Page 1: Header and Provider Note
      addHeaderToPage(doc);
      
      doc.setFontSize(16);
      doc.setFont(undefined, 'bold');
      doc.text('Comprehensive Health Report', 20, currentY);
      currentY += 15;
      
      doc.setFontSize(11);
      doc.setFont(undefined, 'normal');
      doc.text(`Patient: ${userName}`, 20, currentY);
      doc.text(`Report Generated: ${currentDate}`, 20, currentY + 7);
      doc.text(`Generated by: DrKnowsIt AI Health Tracking System`, 20, currentY + 14);
      currentY += 25;
      
      // Provider note
      currentY = addProviderNote(doc, currentY);
      
      // Add disclaimer to first page
      addDisclaimerToPage(doc, pageHeight);
      
      // Page 2: Comprehensive Health Report
      if (report) {
        doc.addPage();
        addHeaderToPage(doc);
        currentY = 40;
        
        doc.setFontSize(14);
        doc.setFont(undefined, 'bold');
        doc.text('Health Status Summary', 20, currentY);
        currentY += 12;
        
        // Overall Status
        doc.setFontSize(11);
        doc.setFont(undefined, 'bold');
        doc.text(`Overall Health Status: ${report.overall_health_status.toUpperCase()}`, 20, currentY);
        doc.text(`Priority Level: ${report.priority_level.toUpperCase()}`, 20, currentY + 7);
        currentY += 20;
        
        // Key Concerns
        if (report.key_concerns && report.key_concerns.length > 0) {
          doc.setFont(undefined, 'bold');
          doc.text('Key Health Concerns:', 20, currentY);
          currentY += 7;
          doc.setFont(undefined, 'normal');
          report.key_concerns.forEach((concern, index) => {
            doc.text(`${index + 1}. ${concern}`, 25, currentY);
            currentY += 5;
          });
          currentY += 5;
        }
        
        // Recommendations
        if (report.recommendations && report.recommendations.length > 0) {
          doc.setFont(undefined, 'bold');
          doc.text('Recommendations:', 20, currentY);
          currentY += 7;
          doc.setFont(undefined, 'normal');
          report.recommendations.forEach((rec, index) => {
            const splitRec = doc.splitTextToSize(`${index + 1}. ${rec}`, 170);
            doc.text(splitRec, 25, currentY);
            currentY += splitRec.length * 5 + 2;
          });
          currentY += 5;
        }
        
        // Health Metrics Summary
        if (report.health_metrics_summary) {
          const metrics = report.health_metrics_summary;
          
          if (metrics.strengths && metrics.strengths.length > 0) {
            doc.setFont(undefined, 'bold');
            doc.text('Health Strengths:', 20, currentY);
            currentY += 7;
            doc.setFont(undefined, 'normal');
            metrics.strengths.forEach((strength) => {
              const splitStrength = doc.splitTextToSize(`• ${strength}`, 170);
              doc.text(splitStrength, 25, currentY);
              currentY += splitStrength.length * 5;
            });
            currentY += 5;
          }
          
          if (metrics.areas_for_improvement && metrics.areas_for_improvement.length > 0) {
            doc.setFont(undefined, 'bold');
            doc.text('Areas for Improvement:', 20, currentY);
            currentY += 7;
            doc.setFont(undefined, 'normal');
            metrics.areas_for_improvement.forEach((area) => {
              const splitArea = doc.splitTextToSize(`• ${area}`, 170);
              doc.text(splitArea, 25, currentY);
              currentY += splitArea.length * 5;
            });
            currentY += 5;
          }
          
          // Borderline values (new feature)
          if (metrics.borderline_values && metrics.borderline_values.length > 0) {
            doc.setFont(undefined, 'bold');
            doc.text('Borderline Values Requiring Attention:', 20, currentY);
            currentY += 7;
            doc.setFont(undefined, 'normal');
            metrics.borderline_values.forEach((value) => {
              const splitValue = doc.splitTextToSize(`• ${value}`, 170);
              doc.text(splitValue, 25, currentY);
              currentY += splitValue.length * 5;
            });
            currentY += 5;
          }
        }
        
        // Report Summary
        if (report.report_summary) {
          doc.setFont(undefined, 'bold');
          doc.text('Comprehensive Analysis:', 20, currentY);
          currentY += 7;
          doc.setFont(undefined, 'normal');
          const splitSummary = doc.splitTextToSize(report.report_summary, 170);
          doc.text(splitSummary, 20, currentY);
          currentY += splitSummary.length * 5;
        }
        
        addDisclaimerToPage(doc, pageHeight);
      }
      
      // Page 3: AI Memory and Insights
      const memoryContent = formatMemoryForPDF();
      if (memoryContent && memoryContent.trim()) {
        doc.addPage();
        addHeaderToPage(doc);
        currentY = 40;
        
        doc.setFontSize(14);
        doc.setFont(undefined, 'bold');
        doc.text('AI Conversation Memory & Insights', 20, currentY);
        currentY += 12;
        
        doc.setFontSize(10);
        doc.setFont(undefined, 'normal');
        const splitMemory = doc.splitTextToSize(memoryContent, 170);
        doc.text(splitMemory, 20, currentY);
        
        addDisclaimerToPage(doc, pageHeight);
      }
      
      // Final page: Complete disclaimer
      doc.addPage();
      addHeaderToPage(doc);
      currentY = 40;
      
      doc.setFontSize(14);
      doc.setFont(undefined, 'bold');
      doc.text('Important Medical Disclaimer', 20, currentY);
      currentY += 15;
      
      doc.setFontSize(10);
      doc.setFont(undefined, 'normal');
      const disclaimer = `This report is generated by DrKnowsIt AI and is intended for informational purposes only. It should not be considered as medical advice, diagnosis, or treatment recommendations.

IMPORTANT LIMITATIONS:
• All data is patient-reported and has not been verified by healthcare professionals
• AI analysis may miss important clinical details or make incorrect correlations
• This tool cannot replace professional medical examination and clinical judgment
• Emergency situations require immediate medical attention, not AI analysis

RECOMMENDATIONS:
• Share this report with your primary care provider during your next visit
• Use this information to facilitate discussions about your health concerns
• Do not make medical decisions based solely on this AI-generated report
• Seek immediate medical attention for any urgent health concerns

LIABILITY: DrKnowsIt and its AI systems are not liable for any health decisions made based on this report. Users assume full responsibility for their healthcare decisions.

For medical emergencies, call 911 or go to your nearest emergency room immediately.

Report generated on ${currentDate} by DrKnowsIt AI Health Assistant
Version: 2.0 | Contact: support@drknowsit.com`;
      
      const splitDisclaimer = doc.splitTextToSize(disclaimer, 170);
      doc.text(splitDisclaimer, 20, currentY);
      
      // Save the PDF
      const fileName = `DrKnowsIt_Comprehensive_Report_${userName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
      doc.save(fileName);
      
      toast({
        title: "Report Exported",
        description: "Comprehensive health report has been downloaded successfully.",
      });
      
    } catch (error) {
      console.error('Error generating comprehensive PDF:', error);
      toast({
        title: "Export Failed",
        description: "Failed to generate PDF report. Please try again.",
        variant: "destructive"
      });
    }
  };

  return (
    <Card className="bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/20 dark:to-indigo-950/20 border-blue-200 dark:border-blue-800">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-blue-900 dark:text-blue-100">
          <FileDown className="h-5 w-5" />
          Comprehensive PDF Export
        </CardTitle>
        <CardDescription className="text-blue-700 dark:text-blue-300">
          Export a complete health report including AI analysis, health forms summary, and conversation memory for your healthcare provider.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-start gap-3 p-3 bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-800 rounded-lg">
          <AlertTriangle className="h-4 w-4 text-amber-600 dark:text-amber-400 mt-0.5 flex-shrink-0" />
          <div className="text-sm text-amber-800 dark:text-amber-200">
            <p className="font-medium mb-1">For Healthcare Providers</p>
            <p>This comprehensive report includes medical disclaimers and notes specifically designed for sharing with your primary care provider.</p>
          </div>
        </div>
        
        <Button 
          onClick={exportComprehensivePDF}
          disabled={!selectedUser}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white"
        >
          <FileDown className="h-4 w-4 mr-2" />
          Export Comprehensive Report
        </Button>
        
        {!selectedUser && (
          <p className="text-sm text-muted-foreground text-center">
            Please select a user to export their comprehensive report
          </p>
        )}
      </CardContent>
    </Card>
  );
};