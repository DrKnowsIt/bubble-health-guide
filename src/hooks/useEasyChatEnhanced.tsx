import { useCallback, useState, useEffect } from 'react';
import { useEasyChat } from './useEasyChat';
import { supabase } from '@/integrations/supabase/client';

export const useEasyChatEnhanced = (patientId?: string, selectedAnatomy?: string[]) => {
  const [healthTopics, setHealthTopics] = useState<any[]>([]);

  const easyChatHook = useEasyChat(patientId, selectedAnatomy);

  // Save topics to conversation_diagnoses table so they appear in health insights
  const saveTopicsAsConversationDiagnoses = useCallback(async (topics: any[], currentPatientId?: string) => {
    if (!topics.length || !currentPatientId) return;

    try {
      const diagnosesToSave = topics.map(topic => ({
        user_id: currentPatientId,
        patient_id: currentPatientId,
        diagnosis: topic.topic || topic.diagnosis,
        confidence: topic.confidence || 0.5,
        reasoning: topic.reasoning || 'Generated from Easy Chat session',
        category: topic.category || 'easy_chat',
        conversation_id: `easy_chat_${Date.now()}`
      }));

      const { error } = await supabase
        .from('conversation_diagnoses')
        .upsert(diagnosesToSave, { 
          onConflict: 'user_id,patient_id,diagnosis',
          ignoreDuplicates: false 
        });

      if (error) {
        console.error('Error saving topics as diagnoses:', error);
      } else {
        console.log('Topics saved to conversation_diagnoses for health insights');
      }
    } catch (error) {
      console.error('Error saving conversation diagnoses:', error);
    }
  }, []);

  // Generate topics in real-time as conversation progresses
  const generateTopicsForConversation = useCallback(async (conversationPath: any[]) => {
    if (conversationPath.length < 2) return; // Need at least 2 exchanges
    
    try {
      const conversationContext = conversationPath.map(step => 
        `Q: ${step.question?.question_text || 'Unknown question'} A: ${step.response}`
      ).join('\n');

      console.log('Generating real-time topics for Easy Chat conversation');
      
      const { data: topicsData, error: topicsError } = await supabase.functions.invoke('analyze-easy-chat-topics', {
        body: { 
          conversation_context: conversationContext,
          patient_id: patientId || '',
          conversation_type: 'easy_chat'
        }
      });

      if (!topicsError && (topicsData?.topics || topicsData?.diagnoses)) {
        const topics = topicsData?.topics || topicsData?.diagnoses || [];
        console.log('Real-time topics generated:', topics);
        setHealthTopics(topics);
        
        // Also save to conversation_diagnoses for health insights panel
        await saveTopicsAsConversationDiagnoses(topics, patientId);
      }
    } catch (error) {
      console.error('Error generating real-time topics:', error);
    }
  }, [patientId, saveTopicsAsConversationDiagnoses]);

  const generateSummary = useCallback((path: any[]) => {
    const questionsAndAnswers = path.map(p => {
      const questionText = p.question?.question_text || 'Question';
      return `Q: ${questionText}\nA: ${p.response}`;
    }).join('\n\n');
    
    const topicsList = healthTopics.map(topic => `• ${topic.topic} (Confidence: ${Math.round(topic.confidence * 100)}%)`).join('\n');
    
    return `DrKnowsIt - AI Health Assistant
www.drknowsit.com

EASY CHAT SESSION SUMMARY

CONVERSATION DETAILS:
${questionsAndAnswers}

AI-IDENTIFIED HEALTH TOPICS FOR YOUR DOCTOR VISIT:
${topicsList || 'No specific health topics identified'}

NEXT STEPS:
• Schedule an appointment with your healthcare provider
• Bring this summary to your visit
• Be prepared to provide additional details about timing, severity, and any related symptoms
• Consider any questions you want to ask your doctor

This summary was generated by DrKnowsIt AI to help prepare you for your medical consultation. Always consult with qualified healthcare professionals for medical advice.`;
  }, [healthTopics]);

  // Enhanced completeSession that saves real AI topics instead of fake ones
  const completeSessionWithTopics = useCallback(async (path: any[], topics: any[]) => {
    if (!easyChatHook.currentSession) return;

    try {
      // Generate summary based on responses
      const summary = generateSummary(path);

      // Format topics for database - use real AI-generated topics
      const formattedTopics = topics.map(topic => ({
        topic: topic.topic || topic.diagnosis,
        category: topic.category || 'general',
        confidence: topic.confidence || 0.5,
        reasoning: topic.reasoning || 'AI analysis',
        created_at: new Date().toISOString()
      }));

      // Save topics to conversation_diagnoses for health insights
      await saveTopicsAsConversationDiagnoses(topics, patientId);

      // Update session as completed with real topics
      await supabase
        .from('easy_chat_sessions')
        .update({ 
          completed: true, 
          final_summary: summary,
          session_data: { 
            conversation_path: path.map(p => ({ 
              question_id: p.question?.id || 'dynamic', 
              question_text: p.question?.question_text || 'Dynamic question', 
              response: p.response 
            })),
            topics_for_doctor: formattedTopics, // Save real AI topics
            selected_anatomy: selectedAnatomy || []
          }
        })
        .eq('id', easyChatHook.currentSession.id);

      console.log('Session completed with enhanced topics:', formattedTopics);
    } catch (error) {
      console.error('Error completing session with topics:', error);
    }
  }, [easyChatHook.currentSession, selectedAnatomy, saveTopicsAsConversationDiagnoses, patientId, generateSummary]);

  // Watch conversation path changes and generate topics
  useEffect(() => {
    if (easyChatHook.conversationPath.length >= 2) {
      generateTopicsForConversation(easyChatHook.conversationPath);
    }
  }, [easyChatHook.conversationPath, generateTopicsForConversation]);

  const completeCurrentSession = useCallback(async () => {
    if (!easyChatHook.currentSession) return;

    try {
      // Require minimum 10 questions before checking AI confidence
      if (easyChatHook.conversationPath.length < 10) {
        console.log(`Need at least 10 questions (currently ${easyChatHook.conversationPath.length}). Continuing conversation...`);
        return; // Don't complete yet, need more questions
      }

      // After 10 questions, check if AI is confident about completion
      if (easyChatHook.conversationPath.length >= 10 && easyChatHook.conversationPath.length < 15) {
        const shouldComplete = await easyChatHook.checkIfReadyToComplete?.(easyChatHook.conversationPath);
        if (!shouldComplete) {
          console.log('AI suggests continuing the conversation for better health topics');
          return; // Don't complete yet, let the conversation continue
        }
      }

      // Force completion after 15 questions to prevent infinite loops
      if (easyChatHook.conversationPath.length >= 15) {
        console.log('Reached maximum questions limit (15). Completing session...');
      }

      // Complete session with real AI-generated topics
      await completeSessionWithTopics(easyChatHook.conversationPath, healthTopics);
      
      console.log('Session completed with final topics:', healthTopics);
    } catch (error) {
      console.error('Error completing session:', error);
    }
  }, [easyChatHook, healthTopics, completeSessionWithTopics]);

  return {
    ...easyChatHook,
    completeCurrentSession,
    healthTopics
  };
};